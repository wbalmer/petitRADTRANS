"""Utility functions for tests.

Regenerate the comparison files only when changing the precision of the models.
"""
import json
import os

import numpy as np

from .context import petitRADTRANS

version = "2.4.5"  # petitRADTRANS.version.version used to generate last tests

tests_data_directory = os.path.join(os.path.dirname(__file__), 'data')
tests_references_directory = os.path.join(os.path.dirname(__file__), 'references')
tests_error_directory = os.path.join(os.path.dirname(__file__), 'errors')
tests_results_directory = os.path.join(os.path.dirname(__file__), 'results')
reference_filenames = {
    'config_test_radtrans':
        'config_test_radtrans',
    'guillot_2010':
        'radtrans_guillot_2010_temperature_profile_ref',
    'correlated_k_transmission_cloud_calculated_radius_scattering':
        'radtrans_correlated_k_transmission_cloud_calculated_radius_scattering_ref',
    'simple_spectrum':
        'simple_spectrum_ref'
}

# Complete filenames
reference_filenames = {
    key: os.path.join(tests_data_directory, value + '.npz')
    if key != 'config_test_radtrans' else
    os.path.join(tests_data_directory, value + '.json')
    for key, value in reference_filenames.items()
}

reference_filenames['mock_observation_transmission'] = reference_filenames[
        'correlated_k_transmission_cloud_calculated_radius_scattering'
    ].rsplit('.', 1)[0] + '.dat'  # using a .dat file is needed for the basic retrieval test
reference_filenames['pymultinest_parameter_analysis'] = \
    os.path.join(tests_data_directory, 'test_stats.json')
reference_filenames['NASA_exoplanet_archive_test'] = \
    os.path.join(tests_data_directory, 'NASA_exoplanet_archive_test.tab')


# Make directories if needed
if not os.path.isdir(tests_results_directory):
    os.mkdir(tests_results_directory)


# Common parameters
def make_petitradtrans_test_config_file(filename):
    with open(os.path.join(filename), 'w') as f:
        json.dump(
            obj={
                'header': f'File generated by tests.utils function\n'
                          f'wavelength units: um\n'
                          f'pressure units: log10(bar), generate using numpy.logspace\n'
                          f'planet radius units: R_jup\n'
                          f'star radius units: R_sun\n'
                          f'metallicity units: log10(solar metallicity)\n'
                          f'angle units: deg\n'
                          f'other units: cgs',
                'prt_version': f'{version}',
                'pressures': {
                    'start': -6,
                    'stop': 2,
                    'stop_thin_atmosphere': 0,
                    'num': 27
                },
                'mass_fractions_correlated_k': {
                    'H2': 0.74,
                    'He': 0.24,
                    '1H2-16O__HITEMP.R1000_0.1-250mu': 0.001,
                    '12C-1H4__YT34to10.R1000_0.3-50mu': 0.001,
                    'Mg2-Si-O4-NatAbund(s)_crystalline_000__DHS.R39_0.1-250mu': 0.0
                 },
                'mass_fractions_line_by_line': {
                    'H2': 0.74,
                    'He': 0.24,
                    '1H2-16O__HITEMP.R1e6_0.3-28mu': 0.001,
                    'C-O-NatAbund__HITEMP.R1e6_0.3-28mu': 0.1,
                    'Mg2-Si-O4-NatAbund(s)_crystalline_000__DHS.R39_0.1-250mu': 0.0
                },
                'mean_molar_mass': 2.33,  # (g.cm-3)
                'chemical_parameters': {
                    'metallicities': [-1.9, 0.0, 3.0],  # (log_10 solar)
                    'c_o_ratios': [0.1, 0.55, 1.6],
                    'pressure': 0.1,  # (bar)
                    'temperature': 900.0,  # (K)
                    'pressure_quench_carbon': 1.0  # (bar)
                },
                'temperature_isothermal': 1200.0,  # (K)
                'temperature_guillot_2010_parameters': {
                    'infrared_mean_opacity': 0.01,
                    'gamma': 0.4,
                    'intrinsic_temperature': 200.0,  # (K)
                    'equilibrium_temperature': 1500.0  # (K)
                },
                'planetary_parameters': {
                    'name': 'PSR B1257+12 b',  # actual planet has no link to below parameters
                    'reference_pressure': 0.01,  # (bar)
                    'radius': 1.838,  # (R_jup)
                    'reference_gravity': 1e1 ** 2.45,  # (cm.s-2)
                    'eddy_diffusion_coefficients': 10 ** 7.5,
                    'orbit_semi_major_axis': 7.5e11,  # (cm)
                    'surface_reflectance': 0.3
                },
                'stellar_parameters': {
                    'effective_temperature': 5778.0,  # (K)
                    'radius': 1.0,  # (R_sun)
                    'mass': 1.0,  # (M_sun)
                    'incidence_angle': 30  # (deg)
                },
                'spectrum_parameters': {
                    'line_by_line_opacity_sampling': 4,
                    'line_species_correlated_k': [
                        '1H2-16O__HITEMP.R1000_0.1-250mu',
                        '12C-1H4__YT34to10.R1000_0.3-50mu'
                    ],
                    'line_species_line_by_line': [
                        '1H2-16O__HITEMP.R1e6_0.3-28mu',
                        'C-O-NatAbund__HITEMP.R1e6_0.3-28mu'
                    ],
                    'rayleigh_species': [
                        'H2',
                        'He'
                    ],
                    'continuum_opacities': [
                        "H2--H2-NatAbund__BoRi.R831_0.6-250mu",
                        "H2--He-NatAbund__BoRi.DeltaWavenumber2_0.5-500mu"
                    ],
                    'wavelength_range_correlated_k': [0.9, 1.2],
                    'wavelength_range_line_by_line': [2.3000, 2.3025]
                },
                'cloud_parameters': {
                   'kappa_zero': 0.01,
                   'gamma_scattering': -4.0,
                   'cloud_pressure': 0.01,
                   'haze_factor': 10.0,
                   'cloud_species': {
                       'Mg2-Si-O4-NatAbund(s)_crystalline_000__DHS.R39_0.1-250mu': {
                           'mass_fraction': 5e-7,
                           'radius': 5e-5,  # (cm)
                           'f_sed': 2.0,
                           'sigma_log_normal': 1.05,
                           'b_hansen': 0.01
                       },
                   }
                },
                'retrieval_parameters': {
                    'planetary_radius_bounds': (1.8, 2.0),
                    'intrinsic_temperature_bounds': (500, 1500),
                    'log10_cloud_pressure_bounds': (-6, 2),
                    'log10_species_mass_fractions_bounds': (-6, 0),
                    'sample_spectrum_output': False,
                    'ultranest': False,
                    'sampling_efficiency': 0.8,
                    'n_live_points': 50,
                    'const_efficiency_mode': False,
                    'resume': False,
                    'seed': 12345
                },
                'mock_observation_parameters': {
                    'resolving_power': 60,
                    'high_resolution_resolving_power': 1e5,
                    'wavelength_range_high_resolution': (2.3005, 2.3020),
                    'orbital_phase_range': (-1e-2, 1e-2),
                    'system_observer_radial_velocities_range': (-5.0e5, -4.85e5),
                    'n_exposures': 20,
                    'rest_frame_velocity_shift': -1.5e5,
                    'relative_error': 1e-2
                },
                'ccf_analysis_parameters': {
                    'normalize_ccf': True,
                    'calculate_ccf_snr': True,
                    'ccf_sum_axes': (0,),
                    'pixels_per_resolution_element': 2,
                    'peak_lsf_factor': 1.5,
                    'velocity_interval_extension_factor': -0.3,
                    'kp_factor': 1.5,
                    'peak_cutoff': 0.68
                }
            },
            fp=f,
            indent=4
        )


def init_test_parameters(recreate_parameter_file=False):
    """
    Initialize various parameters used both to perform the tests and generate the reference files.
    Do not change these parameters when comparing with a previous version.
    """
    if not os.path.isfile(reference_filenames['config_test_radtrans']) or recreate_parameter_file:
        print('Generating Radtrans test parameters file...')
        make_petitradtrans_test_config_file(filename=reference_filenames['config_test_radtrans'])

    with open(reference_filenames['config_test_radtrans'], 'r') as f:
        parameters = json.load(f)

    parameters['pressures_thin_atmosphere'] = np.logspace(
        parameters['pressures']['start'],
        parameters['pressures']['stop_thin_atmosphere'],
        parameters['pressures']['num']
    )

    parameters['pressures'] = np.logspace(
        parameters['pressures']['start'],
        parameters['pressures']['stop'],
        parameters['pressures']['num']
    )

    for key in parameters['mass_fractions_correlated_k']:
        parameters['mass_fractions_correlated_k'][key] *= np.ones_like(parameters['pressures'])

    for key in parameters['mass_fractions_line_by_line']:
        parameters['mass_fractions_line_by_line'][key] *= np.ones_like(parameters['pressures'])

    parameters['mean_molar_mass'] *= np.ones_like(parameters['pressures'])
    parameters['planetary_parameters']['eddy_diffusion_coefficients'] *= np.ones_like(parameters['pressures'])

    return parameters


test_parameters = init_test_parameters()


# Useful functions
def check_cloud_mass_fractions():
    """
    Check if cloud mass fraction is set to 0 by default.
    This is necessary to correctly assess the effect of the different clear and cloud models.
    """
    for species, mmr in test_parameters['mass_fractions_correlated_k'].items():
        if '(c)' in species or '(l)' in species or '(s)' in species or '(cr)' in species:  # condensed species
            if not np.all(mmr == 0):
                raise ValueError(
                    f"cloud {species} has a default mass fraction different of 0, cannot perform test\n"
                    f"mass fraction was: {mmr}"
                )

    for species, mmr in test_parameters['mass_fractions_line_by_line'].items():
        if '(c)' in species or '(l)' in species or '(s)' in species or '(cr)' in species:  # condensed species
            if not np.all(mmr == 0):
                raise ValueError(
                    f"cloud {species} has a default mass fraction different of 0, cannot perform test\n"
                    f"mass fraction was: {mmr}"
                )


# Initializations
def init_guillot_2010_temperature_profile():
    temperature_guillot = petitRADTRANS.physics.temperature_profile_function_guillot_global(
        pressures=test_parameters['pressures'],
        infrared_mean_opacity=test_parameters['temperature_guillot_2010_parameters']['infrared_mean_opacity'],
        gamma=test_parameters['temperature_guillot_2010_parameters']['gamma'],
        gravities=test_parameters['planetary_parameters']['reference_gravity'],
        intrinsic_temperature=test_parameters['temperature_guillot_2010_parameters']['intrinsic_temperature'],
        equilibrium_temperature=test_parameters['temperature_guillot_2010_parameters']['equilibrium_temperature']
    )

    return temperature_guillot


def init_radtrans_test():
    check_cloud_mass_fractions()

    tp_iso = test_parameters['temperature_isothermal'] * np.ones_like(test_parameters['pressures'])
    tp_guillot_2010 = init_guillot_2010_temperature_profile()

    return tp_iso, tp_guillot_2010


def npz2dat(file, new_resolving_power=60.0, relative_error=0.05, mode='transmission'):
    """Converts a .npz spectrum file into a .dat file suitable for the petitRADTRANS.retrieval Data class.

    The .dat file is outputted in the same directory as the .npz file.

    Args:
        file:
            The .npz file to convert.
        new_resolving_power:
            The resolution power of the .dat file. It should be lower than the one in the original file.
        relative_error:
            Mock observation uncertainty to add.
        mode:
            How to read the .npz file ('emission'|'transmission')
    """
    from scripts.mock_observation import convolve_rebin

    npz_data = np.load(file)

    wavelength = npz_data['wavelength']

    if mode == 'emission':
        flux = petitRADTRANS.physics.flux_hz2flux_cm(
            npz_data['spectral_radiosity'],
            petitRADTRANS.physical_constants.c * 1e4 / wavelength  # um to Hz
        )
        flux *= 1e-7  # erg.s-1.cm-2/cm to W.m-2/um

        flux_str = 'spectral_radiosity units: W.m-2/um\n'
    elif mode == 'transmission':
        flux = (
                       npz_data['transit_radius'] * petitRADTRANS.physical_constants.r_jup_mean
                       / (test_parameters['stellar_parameters']['radius'] * petitRADTRANS.physical_constants.r_sun)
               ) ** 2
        flux_str = 'transit_radius units: (R_p/R_star)^2\n'
    else:
        raise ValueError(f"mode must be 'emission' or 'transmission', but was '{mode}'")

    dump, wavelength, flux = convolve_rebin(
        input_wavelengths=wavelength,
        input_flux=flux,
        instrument_resolving_power=new_resolving_power,
        pixel_sampling=1,
        instrument_wavelength_range=(wavelength[1], wavelength[-1])
    )

    error = relative_error * np.max(flux)

    flux += np.random.default_rng().normal(
        loc=0.,
        scale=error,
        size=np.size(flux)
    )

    error *= np.ones_like(wavelength)

    np.savetxt(
        fname=file.rsplit('.', 1)[0] + '.dat',
        X=np.transpose((wavelength, flux, error)),
        header='wavelength flux error\n'
               f'File generated by tests.utils function\n'
               f'wavelength units: um\n'
               f'error and {flux_str}'
               f'resolution power {new_resolving_power}\n'
               f'relative error {relative_error}\n'
               f'original file: {file}'
    )


temperature_isothermal, temperature_guillot_2010 = init_radtrans_test()
